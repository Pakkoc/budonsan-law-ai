{
  "rules": [
    {
      "type": "prd",
      "content": "# 하이브리드 부동산 법률 Q&A 플랫폼 PRD (최종)\n\n## 1. 비전 & 목표\n부동산 거래·세금·대출과 관련된 최신 법령 정보를 \"무료·즉시·신뢰\" 환경으로 제공하고, 변호사에게는 저비용(1,000원/건)으로 잠재 고객 노출 기회를 제공한다.\n\n## 2. 핵심 지표 (MVP)\n1. 월간 활성 질문자(MAU) ≥ 1,000명\n2. AI 답변 만족도 ≥ 80%(5점 척도)\n3. 변호사 추가 답변 비율 ≥ 30%\n4. 변호사 재충전율 ≥ 60%\n5. 첫 방문 → 질문 등록 전환율 ≥ 25%\n\n## 3. 대상 사용자(Persona)\n| 구분 | 특징 | 주요 목표 |\n|---|---|---|\n| 일반 실거주자 | 30‒50대, 집 매매·전세 준비 | 최신 법령을 빠르고 정확하게 파악해 위험을 줄인다 |\n| 전문 투자자 | 다주택·임대 사업자 | 복잡한 절세·대출 규정을 빠르게 확인한다 |\n| 변호사 | 부동산 전문, 개인 사무소 운영 | 저비용으로 잠재 고객을 확보하고 전문성을 알린다 |\n| 관리자 | 플랫폼 운영 담당 | 법령 PDF 관리, 변호사 인증, 이상행위 차단 |\n\n## 4. 문제 정의 & Pain Points\n1. 변호사 상담 비용이 높아 초기 의사결정 단계에서 접근하기 어렵다.\n2. 법령·세법 개정 주기가 짧아 최신 정보 취득이 쉽지 않다.\n3. 온라인 정보는 검증되지 않아 신뢰성이 낮다.\n4. 원하는 정보를 찾기까지 검색·문의 과정을 반복해야 한다.\n\n## 5. 기능 범위\n### 5.1 MUST (MVP 포함)\n1. AI 실시간 Q&A (LangChain/LangGraph RAG)\n   • 질문 즉시 답변\n   • 출처 URL·법령명·개정일 자동 삽입\n   • 카테고리·상황 세부 입력 폼 제공\n2. 변호사 추가 답변\n   • 질문별 스레드에 순서대로 표시(최대 10개/페이지)\n   • 답변 1건당 변호사 잔액 1,000원 차감\n3. 변호사 인증/승인 시스템\n   • 변호사 자격증·신분증 업로드 → 관리자가 수동 승인\n4. PDF 업로드 & 버전 관리(관리자 전용)\n   • 중복 체크, 과거 버전 열람\n\n### 5.2 SHOULD\n5. 질문 키워드 자동 태깅 & 유사 질문 추천\n6. 변호사 프로필 페이지(평점 제외)\n7. 즐겨찾기/북마크\n8. 마이페이지 활동 통계\n\n### 5.3 COULD\n9. 게시판 풀텍스트 검색\n10. 키워드 매칭 웹푸시 알림(변호사 대상)\n\n### 5.4 Out-of-Scope (V1)\n• 1:1 유료 상담, 다국어 지원, OCR PDF 처리\n\n## 6. 사용자 플로우 (핵심)\n1. 질문자: 카테고리 선택 → 개인 상황 세부 입력 → 질문 등록\n2. AI: 실시간 답변 생성+출처 표시 → 법적 면책 고지 노출\n3. 변호사: 관심 키워드 알림 확인 → 답변 작성(1,000원 차감)\n4. 질문자: 여러 변호사 답변 비교 → 북마크·공유\n5. 관리자: 변호사 서류 검토 → 승인/거절, 법령 PDF 업데이트\n\n## 7. 정보 구조(요약)\n• 상단: 검색 & 카테고리, 질문 등록 버튼\n• 본문: AI 답변 카드 → 변호사 답변 리스트 → 유사 질문 추천\n• 사이드(또는 하단): 북마크, 최근 본 질문, 광고 슬롯\n\n## 8. 기술 스택 & 아키텍처(요약)\n• 프론트: Next.js(웹, SSR), Tailwind CSS\n• 백엔드: FastAPI(Python) + Supabase Postgres(pgvector) + LangChain/LangGraph\n• 인증: Supabase Auth (JWT, RLS)\n• 스토리지: Cloudflare R2 + CDN\n• 호스팅: Vercel(웹), Fly.io(API)\n\n## 9. 규제 & 보안\n• 변호사법 준수: AI 답변 법률 행위 면책 고지, 변호사 검토 옵션 명시\n• 개인정보: 이메일·비밀번호, 질문 비공개 선택 지원\n• AI Basic Act(한국) 준수: 투명성, 오류 신고 채널 마련\n\n## 10. 수익 모델\n1. B2E: 변호사 충전금(1,000원/답변)\n2. 광고: 트래픽 성장 후 배너 광고 CPM 모델(Phase 2)\n\n## 11. 출시 일정 (MVP)\n| 마일스톤 | 기간 | 산출물 |\n|---|---|---|\n| 요구사항 확정 | D+0 ~ D+7 | 최종 PRD, 화면 설계 초안 |\n| Sprint 1 | D+8 ~ D+22 | AI Q&A, 기본 질문 UI |\n| Sprint 2 | D+23 ~ D+37 | 변호사 인증, 답변 작성, 결제·차감 |\n| Sprint 3 | D+38 ~ D+52 | PDF 관리, 키워드 태깅 베타 |\n| Beta Test | D+53 ~ D+67 | Closed beta, 버그 픽스 |\n| Launch | D+68 | 웹 MVP 공개 |\n\n## 12. 향후 로드맵(6개월 내)\n• 모바일 앱(Flutter)\n• 세무 계산 보조 챗봇(계산기 아님, 규정 안내)\n• 실시간 웹푸시 알림 & 이메일 다이제스트\n• 광고 관리 콘솔\n\n## 13. 리스크 & 대응\n| 리스크 | 대응 |\n|---|---|\n| AI 답변 오류·환각 | 출처 표기, 변호사 검수, 사용자 신고 버튼 |\n| 규제 위반 위험 | 법무법인 자문, 변호사 답변과 AI 답변 명확히 구분 |\n| 데이터 최신성 | PDF 버전 관리, 주단위 크롤링 파이프라인 |\n| 낮은 변호사 참여 | 첫 달 무료 크레딧, 프로필 노출 강화 |\n\n## 14. 승인\nPM / Tech Lead / Design Lead / CEO  (날짜: _____)",
      "writedAt": "2025-10-03T16:03:26.857Z"
    },
    {
      "type": "architecture",
      "content": "Here is the complete and final refined TRD, rewritten to be lean, focused, and free of over-engineering.\n\n---\n\n# **Technical Requirements Document (TRD): Hybrid Legal Q&A Platform**\n\nThis document outlines the technical specifications for the MVP of the real estate legal Q&A platform. The focus is on a minimal, robust, and scalable implementation aligned with the PRD.\n\n## 1. System Overview\n\n-   **Objective**: Build a web platform providing instant AI-generated legal answers from a controlled knowledge base, supplemented by paid answers from verified lawyers.\n-   **Core Components**:\n    1.  **Web Client**: A Next.js application for all user interactions.\n    2.  **API Server**: A FastAPI backend handling business logic and AI orchestration.\n    3.  **AI Engine**: A LangChain-based RAG (Retrieval-Augmented Generation) pipeline.\n    4.  **Unified Backend**: Supabase for database (Postgres + pgvector), authentication, and file storage (interfacing with Cloudflare R2).\n-   **Key Principles**:\n    -   **Serverless First**: Utilize managed services (Vercel, Fly.io, Supabase) to minimize infrastructure management.\n    -   **Simplicity**: Implement only the essential features for the MVP. Defer optimizations until performance data is available.\n    -   **API-Driven**: The Next.js client is fully decoupled from the backend logic.\n\n## 2. Core Architecture & Tech Stack\n\nThe architecture is designed for simplicity and rapid development.\n\n```mermaid\ngraph TD\n    subgraph \"Browser\"\n        A[Next.js Client @ Vercel]\n    end\n\n    subgraph \"Backend Services\"\n        B[FastAPI Server @ Fly.io]\n        C[Supabase]\n    end\n\n    subgraph \"Supabase (Managed Service)\"\n        C -- Manages --> D[Postgres DB]\n        C -- Manages --> E[pgvector Index]\n        C -- Manages --> F[Auth]\n        C -- Manages --> G[Storage -> Cloudflare R2]\n    end\n\n    subgraph \"AI Processing\"\n       H[LangChain/LangGraph RAG Pipeline]\n    end\n\n    A -- REST API (Questions, Answers) --> B\n    A -- Direct SDK Calls (Auth, User Data) --> C\n    B -- Business Logic --> C\n    B -- Orchestrates --> H\n    H -- Retrieves Docs --> E\n```\n\n### Technology Choices\n\n-   **Frontend**: **Next.js** (App Router) with **Tailwind CSS**. For fast rendering (SSR) and efficient development.\n-   **Backend**: **FastAPI (Python)**. Chosen for its performance and native integration with the AI/ML ecosystem (LangChain).\n-   **Database**: **Supabase Postgres** with the **pgvector** extension. A single, managed solution for structured data, user auth, and vector embeddings.\n-   **AI**: **LangChain/LangGraph**. To structure the RAG pipeline for document ingestion, retrieval, and generation.\n-   **File Storage**: **Cloudflare R2** (via Supabase Storage). For cost-effective storage of legal PDFs and verification documents.\n-   **Hosting**: **Vercel** for the Next.js frontend and **Fly.io** for the FastAPI backend container.\n\n## 3. Data & Service Schemas (High-Level)\n\nThis defines the core data structures and API contracts.\n\n### 3.1. Database Schema (Core Tables)\n\n-   **`users`** (Managed by Supabase Auth)\n    -   `id` (uuid, pk)\n    -   `email` (text)\n    -   `role` (enum: 'user', 'lawyer', 'admin')\n    -   `lawyer_profile_id` (uuid, fk, nullable)\n\n-   **`lawyer_profiles`**\n    -   `id` (uuid, pk)\n    -   `user_id` (uuid, fk)\n    -   `name` (text)\n    -   `verification_status` (enum: 'pending', 'approved', 'rejected')\n    -   `verification_document_url` (text)\n    -   `balance` (integer, default: 0) - *Represents credits, not currency.*\n\n-   **`questions`**\n    -   `id` (uuid, pk)\n    -   `user_id` (uuid, fk)\n    -   `title` (text)\n    -   `body` (jsonb) - *Structured data from the input form.*\n    -   `category` (text)\n    -   `ai_answer` (jsonb) - *`{ \"content\": \"...\", \"sources\": [...] }`*\n    -   `created_at` (timestamp)\n\n-   **`answers`** (Lawyer Answers)\n    -   `id` (uuid, pk)\n    -   `question_id` (uuid, fk)\n    -   `lawyer_id` (uuid, fk to `users`)\n    -   `content` (text)\n    -   `created_at` (timestamp)\n\n-   **`documents`** (Legal PDFs for RAG)\n    -   `id` (uuid, pk)\n    -   `file_name` (text)\n    -   `storage_url` (text)\n    -   `version` (integer)\n    -   `is_active` (boolean)\n    -   `uploaded_by` (uuid, fk to `users`)\n\n### 3.2. Key API Endpoints (FastAPI)\n\n-   `POST /questions`: Submit a new question. Triggers the RAG pipeline.\n-   `GET /questions/{id}`: Retrieve a question, its AI answer, and all lawyer answers.\n-   `POST /questions/{id}/answers`: A verified lawyer submits an answer.\n-   `POST /lawyers/verify`: A user with role 'lawyer' submits verification documents.\n-   `POST /admin/documents`: An admin uploads a new PDF document. Triggers ingestion.\n-   `PUT /admin/lawyers/{id}/approve`: An admin approves a lawyer's verification.\n\n## 4. Key Technical Flows\n\n### 4.1. AI Q&A Flow (RAG)\n\n1.  **Admin Upload (Ingestion)**:\n    -   Admin uploads a PDF via the admin panel.\n    -   The file is saved to Cloudflare R2.\n    -   A background job is triggered:\n        -   The PDF is parsed and split into text chunks.\n        -   Each chunk is converted into a vector embedding using an embedding model.\n        -   Embeddings and their corresponding text are stored in the `pgvector` index.\n\n2.  **User Asks (Generation)**:\n    -   User submits a question via the Next.js client.\n    -   The FastAPI `/questions` endpoint is called.\n    -   The user's question is converted into a vector embedding.\n    -   A similarity search is performed against the `pgvector` index to find the most relevant document chunks (context).\n    -   The original question and the retrieved context are passed to a Large Language Model (LLM) via LangChain.\n    -   The LLM generates an answer based *only* on the provided context, citing sources.\n    -   The generated answer and sources are saved to the `questions` table and returned to the client.\n\n### 4.2. Lawyer Authentication & Answering Flow\n\n1.  **Sign-up & Verification**:\n    -   A user signs up and selects the 'lawyer' role.\n    -   They are prompted to upload verification documents (e.g., license PDF).\n    -   The documents are saved to a secure R2 bucket.\n    -   The `lawyer_profiles.verification_status` is set to `pending`.\n2.  **Admin Approval**:\n    -   An admin reviews the pending applications in the admin dashboard.\n    -   The admin approves or rejects the application, updating the `verification_status`.\n3.  **Answering**:\n    -   An approved lawyer browses questions.\n    -   They submit an answer via `POST /questions/{id}/answers`.\n    -   The API backend verifies:\n        -   The user is an approved lawyer.\n        -   Their `balance` is ≥ 1000.\n    -   A database transaction deducts 1000 from their `balance` and inserts the new answer into the `answers` table.\n\n## 5. Implementation Sprints (MVP)\n\nThis roadmap directly translates the PRD timeline into technical deliverables.\n\n-   **Sprint 1 (D+8 ~ D+22): AI Q&A Core**\n    -   **Goal**: A user can ask a question and get an AI answer.\n    -   **Deliverables**:\n        -   Setup Supabase schema (users, questions, documents).\n        -   Implement admin PDF upload and RAG ingestion pipeline.\n        -   Build FastAPI endpoint for `/questions` that runs the RAG chain.\n        -   Create a basic Next.js page to submit a question and display the AI answer.\n\n-   **Sprint 2 (D+23 ~ D+37): Lawyer Functionality**\n    -   **Goal**: Verified lawyers can provide paid answers.\n    -   **Deliverables**:\n        -   Implement lawyer verification flow (upload form, admin approval UI).\n        -   Build lawyer answer submission UI and API (`/questions/{id}/answers`).\n        -   Implement the credit deduction logic within a DB transaction.\n        -   Integrate TossPayments for lawyers to charge their credit balance.\n        -   Display lawyer answers in a thread below the AI answer.\n\n-   **Sprint 3 (D+38 ~ D+52): Admin & Polish**\n    -   **Goal**: Admins have necessary tools and the platform is ready for beta.\n    -   **Deliverables**:\n        -   Build admin dashboard for PDF version management and lawyer verification.\n        -   Implement keyword auto-tagging (simple NLP on question title) and save as tags.\n        -   Develop the \"similar questions\" component based on tag matching.\n        -   Refine UI/UX and ensure all legal disclaimers are in place.\n\n## 6. Non-Functional Requirements & Risks\n\n-   **Performance**:\n    -   **Target**: P95 AI answer generation time < 5 seconds.\n    -   **Strategy**: Use streaming responses to show text as it's generated. Cache common queries if needed *after* launch.\n\n-   **Security**:\n    -   **Authentication**: Handled by Supabase Auth (JWT).\n    -   **Authorization**: Use Supabase Row Level Security (RLS) policies extensively.\n        -   Users can only edit their own questions.\n        -   Only approved lawyers can post answers.\n        -   Admins have access to all data.\n    -   **Input Validation**: Use Pydantic in FastAPI to strictly validate all API inputs.\n\n-   **Key Risks & Mitigations**:\n    -   **AI Hallucination**: The RAG pipeline inherently reduces this risk.\n        -   **Mitigation**: Strictly enforce source citation in the LLM prompt. Prominently display a \"user report error\" button on every AI answer.\n    -   **Regulatory Compliance (변호사법)**: AI answers must not be presented as legal advice.\n        -   **Mitigation**: Display a clear, non-negotiable legal disclaimer above every AI answer. Clearly label AI vs. Lawyer answers.\n    -   **Slow Lawyer Adoption**: The platform is useless without lawyers.\n        -   **Mitigation**: The system will support issuing free initial credits to new lawyers, managed by an admin. This is a business decision supported by the `balance` field.",
      "writedAt": "2025-10-03T16:03:26.857Z"
    },
    {
      "type": "guideline",
      "content": "# Hybrid Legal Q&A Platform: Official Code Guideline\n\n## 1. Project Overview\n\nThis document establishes the official coding standards for the Hybrid Legal Q&A Platform. Our architecture is designed for rapid development, scalability, and maintainability, leveraging a modern, decoupled stack.\n\n-   **Frontend**: A server-side rendered (SSR) web application built with **Next.js (App Router)** and styled with **Tailwind CSS**, hosted on **Vercel**.\n-   **Backend API**: A high-performance REST API built with **FastAPI (Python)**, responsible for business logic and AI orchestration, hosted on **Fly.io**.\n-   **Unified Backend-as-a-Service (BaaS)**: **Supabase** provides the core infrastructure, including the **Postgres** database (with **pgvector**), **Authentication**, and **Storage** (interfacing with **Cloudflare R2**).\n\nThe key architectural principle is a clear separation of concerns: the Next.js client is fully decoupled from the FastAPI backend, communicating via a well-defined REST API. The client may interact directly with Supabase for authentication and simple data retrieval secured by Row Level Security (RLS).\n\n## 2. Core Principles\n\nThese principles are the foundation of our engineering culture and must guide all development decisions.\n\n1.  **Clarity Over Cleverness**: Write simple, self-documenting code that a new developer can understand without deep context.\n2.  **Security by Design**: Implement security at every layer, from frontend inputs to backend validation and database-level RLS policies.\n3.  **Own Your Domain**: The frontend owns presentation and user state. The backend owns business logic, data integrity, and AI processes.\n4.  **Type Safety is Non-Negotiable**: Strictly leverage TypeScript and Pydantic to catch errors at build time, not runtime.\n\n## 3. Language-Specific Guidelines\n\n### Next.js (TypeScript / App Router)\n\n#### Directory Structure\n\nWe use a feature-based structure within the App Router paradigm. Group all related files for a feature together to improve locality. Prefix private folders that are not part of the routing with an underscore (`_`).\n\n```text\n/src\n├── /app\n│   ├── /questions\n│   │   ├── /[id]\n│   │   │   ├── /_components  // Feature-specific components (e.g., AnswerForm.tsx)\n│   │   │   ├── /_hooks       // Feature-specific hooks (e.g., useQuestionData.ts)\n│   │   │   └── page.tsx      // The route's server component\n│   │   └── page.tsx          // The /questions list page\n│   ├── layout.tsx\n│   └── page.tsx\n├── /components\n│   ├── /ui                 // Reusable, generic UI components (Button.tsx, Input.tsx)\n│   └── /shared             // Reusable, complex components (Header.tsx, Footer.tsx)\n├── /lib                    // Supabase client, helpers, utils\n└── /types                  // Global type definitions (e.g., database.ts)\n```\n\n#### Import & Dependency Management\n\n-   **MUST** use absolute paths for imports using `@/*` configured in `tsconfig.json`.\n-   **MUST** group and order imports to maintain consistency.\n\n```typescript\n// MUST: Order imports logically\n// 1. React / Next.js imports\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\n\n// 2. External library imports\nimport { zodResolver } from '@hookform/resolvers/zod';\n\n// 3. Internal component/module imports\nimport { Button } from '@/components/ui/button';\nimport { useUser } from '@/hooks/useUser';\n```\n\n#### Error Handling\n\n-   **MUST** use `try/catch` blocks within Server Actions and API Route Handlers for robust error management.\n-   **MUST** wrap sections of the UI prone to runtime errors in React `<ErrorBoundary>` components to prevent the entire page from crashing.\n\n### FastAPI (Python)\n\n#### Directory Structure\n\nOrganize the backend by responsibility to ensure a clean and scalable codebase.\n\n```text\n/app\n├── /api\n│   ├── /v1\n│   │   ├── /endpoints      // Routers (e.g., questions.py, lawyers.py)\n│   │   └── api.py          // API router aggregator\n├── /core                   // Application config, settings\n├── /models                 // Pydantic schemas/models\n├── /services               // Business logic (e.g., rag_service.py)\n├── /db                     // Database session management\n└── main.py                 // FastAPI app instantiation\n```\n\n#### Dependency Management\n\n-   **MUST** use `Poetry` or `pip` with a `requirements.txt` file to manage dependencies.\n-   **MUST** pin dependency versions to ensure reproducible builds.\n\n#### Error Handling\n\n-   **MUST** use FastAPI's exception handlers to catch specific exceptions and return standardized JSON error responses. This prevents stack traces from leaking to the client.\n\n```python\n# MUST: Use custom exception handlers for consistent error responses\nfrom fastapi import FastAPI, Request, status\nfrom fastapi.responses import JSONResponse\n\nclass InsufficientBalanceError(Exception):\n    pass\n\napp = FastAPI()\n\n@app.exception_handler(InsufficientBalanceError)\nasync def insufficient_balance_exception_handler(request: Request, exc: InsufficientBalanceError):\n    return JSONResponse(\n        status_code=status.HTTP_400_BAD_REQUEST,\n        content={\"message\": \"Insufficient balance to perform this action.\"},\n    )\n```\n\n## 4. Code Style Rules\n\n### MUST Follow:\n\n1.  **Automated Linting and Formatting**: All code MUST pass linter and formatter checks before merging.\n    -   **Frontend**: ESLint and Prettier.\n    -   **Backend**: Ruff and Black.\n    -   *Rationale*: Enforces a single, objective style, eliminating debates and improving readability.\n\n2.  **Naming Conventions**:\n    -   **TypeScript**: `camelCase` for variables and functions. `PascalCase` for components, types, and interfaces.\n    -   **Python**: `snake_case` for variables and functions. `PascalCase` for classes.\n    -   *Rationale*: Standard conventions for each language make the code predictable.\n\n3.  **Environment Variables**:\n    -   All environment variables for the Next.js client that need to be exposed to the browser **MUST** be prefixed with `NEXT_PUBLIC_`.\n    -   *Rationale*: This is a Next.js security feature to prevent accidentally leaking server-side secrets to the client.\n\n### MUST NOT Do:\n\n1.  **Do not place business logic in UI components**.\n    -   *Rationale*: Components should be responsible for rendering UI. Complex logic makes them difficult to test, reuse, and maintain. Abstract logic into hooks, services, or server-side functions.\n\n    ```typescript\n    // MUST NOT: Mix fetching and business logic directly in a component\n    function QuestionPage({ id }) {\n      const [question, setQuestion] = useState(null);\n      useEffect(() => {\n        // Bad: direct API call with hardcoded URL\n        fetch(`https://api.example.com/questions/${id}`)\n          .then(res => res.json())\n          .then(data => {\n            // Bad: complex data transformation logic here\n            const formatted = { ...data, createdAt: new Date(data.createdAt) };\n            setQuestion(formatted);\n          });\n      }, [id]);\n      // ... render logic\n    }\n    ```\n\n2.  **Do not use the `any` type in TypeScript**.\n    -   *Rationale*: Using `any` defeats the entire purpose of TypeScript and hides potential bugs. Define a specific `interface` or `type`.\n\n3.  **Do not write raw, unparameterized SQL queries**.\n    -   *Rationale*: This is a major security risk (SQL injection). Always use the Supabase client library or an ORM that properly parameterizes queries.\n\n## 5. Architecture Patterns\n\n### Component Structure (Next.js)\n\n-   **MUST** default to Server Components for data fetching and rendering non-interactive UI.\n-   **MUST** use the `'use client'` directive only for components that require interactivity (e.g., using hooks like `useState` or `useEffect`). Keep Client Components as small as possible (\"at the leaves\" of the component tree).\n\n```typescript\n// MUST: Proper use of Server and Client Components\n// app/questions/[id]/page.tsx (Server Component)\nimport { supabase } from '@/lib/supabase';\nimport { QuestionDisplay } from './_components/QuestionDisplay';\n\nexport default async function QuestionPage({ params }) {\n  // Data is fetched on the server\n  const { data: question } = await supabase\n    .from('questions')\n    .select('*')\n    .eq('id', params.id)\n    .single();\n\n  return (\n    <div>\n      <h1>{question.title}</h1>\n      {/* Interactive part is isolated in a Client Component */}\n      <QuestionDisplay content={question.body} />\n    </div>\n  );\n}\n\n// app/questions/[id]/_components/QuestionDisplay.tsx (Client Component)\n'use client';\n\nimport { useState } from 'react';\n\nexport function QuestionDisplay({ content }) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  // This component can now use state and event handlers\n  return (\n    <div>\n      <p>{isExpanded ? content : `${content.substring(0, 100)}...`}</p>\n      <button onClick={() => setIsExpanded(!isExpanded)}>\n        {isExpanded ? 'Show Less' : 'Show More'}\n      </button>\n    </div>\n  );\n}\n```\n\n### Data Flow\n\n-   **Client <-> Supabase**: Use the Supabase JS client directly for **authentication** and **simple data reads/writes** that can be fully secured with RLS policies.\n-   **Client <-> FastAPI**: Use our FastAPI backend for all **complex business logic**, **AI-related operations**, and actions requiring elevated privileges or transactions (e.g., a lawyer submitting an answer and deducting credit).\n\n### State Management\n\n-   **MUST** start with React's built-in state management hooks (`useState`, `useReducer`, `useContext`).\n-   **MUST NOT** introduce a global state management library (e.g., Redux, Zustand) for the MVP. Use URL state (search params) for managing global state like filters or pagination where possible.\n\n### API Design (FastAPI)\n\n-   **MUST** use Pydantic models for all API request bodies and responses. This provides automatic data validation, conversion, and OpenAPI documentation.\n-   **MUST** follow RESTful principles. Use nouns for resource URLs (e.g., `/questions`) and HTTP verbs for actions (`POST`, `GET`, `PUT`).\n\n```python\n# MUST: Use Pydantic models for type-safe API contracts\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nclass QuestionCreate(BaseModel):\n    title: str\n    body: dict\n    category: str\n\nclass QuestionResponse(BaseModel):\n    id: UUID\n    title: str\n    ai_answer: dict\n\napp = FastAPI()\n\n@app.post(\"/questions\", response_model=QuestionResponse, status_code=201)\nasync def create_question(question: QuestionCreate):\n    # Pydantic automatically validates the incoming request body.\n    # If validation fails, it returns a 422 error.\n    # ... service logic to process the question ...\n    new_question = await question_service.create(question)\n    return new_question\n```",
      "writedAt": "2025-10-03T16:03:26.857Z"
    },
    {
      "type": "design-guide",
      "content": "# 하이브리드 부동산 법률 Q&A 플랫폼 Design Guide\n\n## 1. 전체적인 무드 (Overall Mood)\n\n전문적이면서도 접근 가능한 디지털 법률 상담 서비스로서, **신뢰성과 전문성**을 바탕으로 한 차분하고 정돈된 디자인을 추구합니다. 복잡한 부동산 법률 정보를 누구나 쉽게 이해할 수 있도록 **명확한 정보 구조**와 **직관적인 인터페이스**를 제공하며, AI와 변호사의 협업을 통한 하이브리드 서비스의 혁신성을 시각적으로 표현합니다.\n\n핵심 키워드: **신뢰감, 전문성, 접근성, 명확성, 혁신성**\n\n## 2. 참조 서비스 (Reference Service)\n\n- **이름**: Toss\n- **설명**: 간편 금융 서비스 플랫폼으로 복잡한 금융 정보를 직관적으로 제공\n- **디자인 무드**: 깔끔하고 모던한 인터페이스, 높은 가독성과 사용자 친화적 경험\n- **Primary Color**: #0064FF\n- **Secondary Color**: #F5F7FA\n\n토스의 신뢰할 수 있는 금융 서비스 경험을 부동산 법률 분야에 적용하여, 전문적이면서도 친근한 사용자 경험을 제공합니다.\n\n## 3. 색상 & 그라데이션 (Color & Gradient)\n\n### 주요 색상 팔레트\n- **Primary Color**: #0064FF (신뢰감을 주는 블루)\n- **Primary Dark**: #0040C0 (호버/액티브 상태)\n- **Secondary Color**: #F5F7FA (배경 및 카드)\n- **Success**: #2DB47C (승인, 성공 상태)\n- **Danger**: #FF4D4F (오류, 경고)\n- **Text Primary**: #1B1E27 (제목, 주요 텍스트)\n- **Text Secondary**: #666D7C (부가 설명, 메타데이터)\n\n### 무드\n- **톤**: Cool tone (차가운 톤)\n- **채도**: Low saturation (낮은 채도)\n\n### 색상 사용 우선순위\n1. **Primary (#0064FF)**: 주요 CTA 버튼, 질문 등록 버튼, 중요한 강조 텍스트\n2. **Text Primary (#1B1E27)**: 모든 제목, 핵심 콘텐츠 텍스트\n3. **Secondary (#F5F7FA)**: 배경, 카드, 입력 필드\n4. **Text Secondary (#666D7C)**: 부가 정보, 시간, 메타데이터\n\n## 4. 타이포그래피 & 폰트 (Typography & Font)\n\n### 폰트 패밀리\n**Pretendard** (한국어 최적화 웹폰트)\n\n### 타이포그래피 시스템\n- **Heading 1**: Pretendard, 32px, 700 (Bold)\n- **Heading 2**: Pretendard, 24px, 600 (SemiBold)  \n- **Body**: Pretendard, 16px, 400 (Regular)\n- **Caption**: Pretendard, 12px, 400 (Regular)\n\n### 특별 규칙\n- 숫자 표기 시 Tabular lining 사용으로 정렬 유지\n- 법률 용어는 툴팁으로 설명 제공\n- 줄 간격(Line Height): 1.5배 기본 적용\n\n## 5. 레이아웃 & 구조 (Layout & Structure)\n\n### 그리드 시스템\n- **데스크톱**: 12-column 그리드, 72px 거터, 최대 너비 1280px\n- **모바일**: 4-column 그리드, 16px 거터, 100% 너비\n\n### 레이아웃 원칙\n- 주요 콘텐츠는 중앙 8-column에 배치하여 집중도 확보\n- 좌우 여백을 통한 시각적 안정감 제공\n- 정보 계층 구조를 명확히 하는 수직 리듬 적용\n\n### 컴포넌트 배치\n- **상단**: 로고, 검색창, 질문하기 버튼\n- **본문**: AI 답변 카드 → 변호사 답변 리스트 → 유사 질문 추천\n- **사이드바/하단**: 북마크, 최근 본 질문, 광고 슬롯\n\n## 6. 비주얼 스타일 (Visual Style)\n\n### 아이콘 시스템\n- **아이콘 세트**: Feather Icons (2px stroke)\n- **컬러**: Text Secondary (#666D7C)\n- **크기**: 16px, 20px, 24px (용도별 구분)\n\n### 일러스트레이션\n- **스타일**: 3-tone flat illustration\n- **색상**: Primary, Secondary, Light Gray 조합\n- **용도**: 빈 상태(Empty State), 온보딩, 에러 페이지\n\n### 이미지 가이드\n- 모든 PDF 썸네일: Cloudflare 이미지 리사이즈로 400px 너비 WebP 제공\n- 프로필 아바타: 128×128px, JPG ≤100KB\n- 이미지 모서리: 8px 라운드 처리\n\n## 7. UX 가이드 (UX Guide)\n\n### 타겟 사용자별 UX 전략\n\n#### 일반 사용자 (초보자)\n- **원칙**: 복잡한 법률 용어를 최소화하고 직관적인 안내 제공\n- **구현**: 단계별 질문 폼, 툴팁을 통한 용어 설명, 시각적 가이드\n\n#### 전문 투자자 (중급자)\n- **원칙**: 효율적인 정보 접근과 빠른 의사결정 지원\n- **구현**: 고급 필터링, 키워드 검색, 북마크 시스템\n\n#### 변호사 (전문가)\n- **원칙**: 전문성 어필과 효율적인 답변 작성 환경\n- **구현**: 프로필 최적화, 답변 에디터, 통계 대시보드\n\n### 핵심 UX 원칙\n1. **투명성**: AI 답변과 변호사 답변을 명확히 구분\n2. **신뢰성**: 출처 표기, 면책 고지 상시 노출\n3. **접근성**: WCAG 2.1 AA 기준 준수\n4. **효율성**: 3클릭 이내 목표 달성\n\n## 8. UI 컴포넌트 가이드 (UI Component Guide)\n\n### 버튼 (Buttons)\n#### Primary 버튼\n- **색상**: Primary (#0064FF)\n- **텍스트**: White (#FFFFFF)\n- **패딩**: 12px 24px\n- **라운드**: 8px\n- **호버**: Primary Dark (#0040C0)\n- **트랜지션**: 150ms ease-in-out\n\n#### Secondary 버튼\n- **색상**: 투명 배경\n- **테두리**: 1px solid #E5E7EB\n- **텍스트**: Text Primary (#1B1E27)\n- **패딩**: 12px 24px\n- **라운드**: 8px\n\n### 입력 필드 (Input Fields)\n- **배경**: Secondary (#F5F7FA)\n- **테두리**: 1px solid #E5E7EB\n- **포커스**: Primary (#0064FF) 테두리\n- **패딩**: 12px 16px\n- **라운드**: 8px\n- **라벨**: 항상 표시 (Placeholder에만 의존하지 않음)\n\n### 카드 (Cards)\n#### AI 답변 카드\n- **배경**: White (#FFFFFF)\n- **그림자**: 0 2px 8px rgba(0,0,0,0.1)\n- **패딩**: 24px\n- **라운드**: 12px\n- **구성**: 요약(굵은 텍스트) + 펼치기/접기 버튼\n\n#### 변호사 답변 카드\n- **배경**: White (#FFFFFF)\n- **그림자**: 0 1px 4px rgba(0,0,0,0.05)\n- **패딩**: 20px\n- **라운드**: 8px\n- **구성**: 프로필 아바타 + 이름 + 답변 + 제출 시간\n\n### 네비게이션 (Navigation)\n#### 상단 네비게이션\n- **높이**: 64px\n- **배경**: White (#FFFFFF)\n- **그림자**: 0 1px 3px rgba(0,0,0,0.1)\n- **구성**: 로고 + 검색창 + 질문하기 버튼\n\n#### 단계별 네비게이션 (Stepper)\n- **활성 단계**: Primary (#0064FF)\n- **완료 단계**: Success (#2DB47C)\n- **대기 단계**: #E5E7EB\n- **연결선**: 2px solid\n\n### 알림 & 경고 (Alerts)\n#### 면책 고지 배너\n- **배경**: Secondary (#F5F7FA)\n- **텍스트**: Danger (#FF4D4F)\n- **아이콘**: 경고 아이콘\n- **패딩**: 16px\n- **라운드**: 8px\n\n#### 성공 메시지\n- **배경**: Success 10% opacity\n- **텍스트**: Success (#2DB47C)\n- **아이콘**: 체크 아이콘\n\n### 모달 & 툴팁 (Modals & Tooltips)\n#### 툴팁\n- **배경**: #1B1E27\n- **텍스트**: White (#FFFFFF)\n- **패딩**: 8px 12px\n- **라운드**: 6px\n- **최대 너비**: 280px\n\n#### 모달\n- **오버레이**: rgba(0,0,0,0.5)\n- **배경**: White (#FFFFFF)\n- **라운드**: 16px\n- **애니메이션**: Fade-in 250ms + Slide-up 20px\n\n### 인터랙션 & 애니메이션\n- **버튼 호버**: 색상 변환 150ms ease-in-out\n- **카드 전개/접기**: Height transition 200ms\n- **페이지 로딩**: Skeleton UI 적용\n- **키보드 포커스**: 2px solid Primary outline\n\n### 광고 슬롯\n#### 데스크톱\n- **크기**: 300×600px (우측 사이드바)\n- **배경**: Secondary (#F5F7FA)\n- **테두리**: 1px solid #E5E7EB\n\n#### 모바일\n- **크기**: 320×100px (AI 답변 카드 하단)\n- **배경**: Secondary (#F5F7FA)\n- **여백**: 상하 16px\n\n### 접근성 (Accessibility) 가이드\n- Primary (#0064FF) 대비 텍스트는 White (#FFFFFF) 사용으로 4.5:1 대비 이상 확보\n- 키보드 포커스 순서: 상단 네비게이션 → 메인 영역 → 하단\n- 스크린 리더를 위한 적절한 ARIA 라벨 적용\n- 색상에만 의존하지 않는 정보 전달\n\n### 반응형 디자인\n- **브레이크포인트**: 768px (모바일/데스크톱 구분)\n- **모바일**: 단일 컬럼 레이아웃, 터치 친화적 44px 최소 터치 영역\n- **데스크톱**: 멀티 컬럼 레이아웃, 마우스 호버 인터랙션 활용",
      "writedAt": "2025-10-03T16:03:26.857Z"
    },
    {
      "type": "ia",
      "content": "# 하이브리드 부동산 법률 Q&A 플랫폼 정보 구조 (IA)\n\n## 1. 사이트맵 (사이트맵)\n\n```\n├── 홈 (/)\n├── 질문하기 (/ask)\n│   ├── 카테고리 선택 (/ask/category)\n│   ├── 상세 정보 입력 (/ask/details)\n│   └── 제출 완료 (/ask/complete)\n├── 질문 상세 (/questions/:id)\n├── 검색 & 목록 (/search)\n│   ├── 전체 질문 목록 (/questions)\n│   └── 카테고리별 목록 (/category/:name)\n├── 인증 (/auth)\n│   ├── 로그인 (/auth/login)\n│   ├── 회원가입 (/auth/signup)\n│   └── 비밀번호 찾기 (/auth/reset)\n├── 마이페이지 (/my)\n│   ├── 내 질문 (/my/questions)\n│   ├── 북마크 (/my/bookmarks)\n│   ├── 활동 통계 (/my/stats)\n│   └── 계정 설정 (/my/settings)\n├── 변호사 대시보드 (/lawyer) - 인증 필요\n│   ├── 답변 대기 질문 (/lawyer/pending)\n│   ├── 내 답변 관리 (/lawyer/answers)\n│   ├── 잔액 관리 (/lawyer/billing)\n│   └── 프로필 편집 (/lawyer/profile)\n├── 관리자 (/admin) - 관리자 권한 필요\n│   ├── 변호사 인증 관리 (/admin/lawyers)\n│   ├── 법령 PDF 관리 (/admin/documents)\n│   ├── 신고 관리 (/admin/reports)\n│   └── 통계 리포트 (/admin/analytics)\n├── 온보딩 (/onboarding)\n└── 오류 페이지\n    ├── 404 페이지 (/404)\n    └── 500 페이지 (/500)\n```\n\n## 2. 사용자 흐름 (사용자 흐름)\n\n### **핵심 작업 1: 일반인 질문 등록 및 답변 확인**\n1. 홈페이지 방문 → 상단 검색창에 간단 질문 입력\n2. \"질문하기\" 버튼 클릭 → 회원가입/로그인 유도\n3. 카테고리 선택 (전세/임대차, 매매, 세금, 대출 등)\n4. 개인 상황 세부 입력 폼 작성\n5. 질문 제출 → 질문 상세 페이지로 이동\n6. AI 실시간 답변 확인 (3초 내 생성)\n7. 변호사 답변 대기 → 알림 수신 시 답변 확인\n8. 답변 북마크 저장 또는 PDF 출력\n\n### **핵심 작업 2: 변호사 답변 작성 및 수익 창출**\n1. 변호사 회원가입 → 자격증 업로드\n2. 관리자 승인 대기 → 승인 완료 알림\n3. 변호사 대시보드 접근 → 관심 키워드 설정\n4. 새로운 질문 웹푸시 알림 수신\n5. 답변 대기 질문 목록에서 관심 질문 선택\n6. 답변 작성 → 1,000원 차감 안내 확인\n7. 답변 제출 → 질문 페이지에 즉시 노출\n8. 프로필 조회수 및 연락처 노출을 통한 리드 확보\n\n### **핵심 작업 3: 관리자 법령 업데이트 및 변호사 승인**\n1. 관리자 로그인 → 관리자 대시보드 접근\n2. 신규 법령 PDF 업로드 → 중복 검사 통과\n3. 버전 관리 시스템에 자동 등록\n4. 변호사 인증 대기 목록 확인\n5. 제출된 서류 검토 → 승인/거절 처리\n6. 신고된 답변 검토 → 필요시 삭제 처리\n\n## 3. 네비게이션 구조 (네비게이션 구조)\n\n### **글로벌 네비게이션 (GNB)**\n- **위치**: 상단 고정 (Sticky Header)\n- **구성 요소**:\n  - 좌측: 로고 (홈으로 이동)\n  - 중앙: 통합 검색창\n  - 우측: 질문하기 버튼, 로그인/프로필 메뉴\n\n### **메인 네비게이션**\n- **홈**: 최신 질문, 인기 질문, 카테고리 탭\n- **질문하기**: 단계별 진행 표시기 (Stepper)\n- **검색/목록**: 좌측 필터 사이드바, 정렬 옵션\n\n### **사용자별 네비게이션**\n- **일반 사용자**: 마이페이지 (내 질문, 북마크, 설정)\n- **변호사**: 변호사 대시보드 (답변 관리, 잔액, 프로필)\n- **관리자**: 관리자 패널 (승인, PDF 관리, 통계)\n\n### **푸터 네비게이션**\n- 이용약관, 개인정보처리방침, 고객센터, 회사 정보\n\n## 4. 페이지 계층 구조 (페이지 계층 구조)\n\n```\n/ (깊이 1)\n├── ask/ (깊이 1)\n│   ├── category (깊이 2)\n│   ├── details (깊이 2)\n│   └── complete (깊이 2)\n├── questions/ (깊이 1)\n│   └── :id (깊이 2)\n├── search (깊이 1)\n├── category/ (깊이 1)\n│   └── :name (깊이 2)\n├── auth/ (깊이 1)\n│   ├── login (깊이 2)\n│   ├── signup (깊이 2)\n│   └── reset (깊이 2)\n├── my/ (깊이 1)\n│   ├── questions (깊이 2)\n│   ├── bookmarks (깊이 2)\n│   ├── stats (깊이 2)\n│   └── settings (깊이 2)\n├── lawyer/ (깊이 1)\n│   ├── pending (깊이 2)\n│   ├── answers (깊이 2)\n│   ├── billing (깊이 2)\n│   └── profile (깊이 2)\n├── admin/ (깊이 1)\n│   ├── lawyers (깊이 2)\n│   ├── documents (깊이 2)\n│   ├── reports (깊이 2)\n│   └── analytics (깊이 2)\n├── onboarding (깊이 1)\n├── 404 (깊이 1)\n└── 500 (깊이 1)\n```\n\n## 5. 콘텐츠 구성 (콘텐츠 구성)\n\n| 페이지 | 주요 콘텐츠 요소 |\n|---|---|\n| 홈 | 히어로 섹션, 검색창, 카테고리 탭, 최신 질문 카드, 인기 질문 목록, 서비스 소개 |\n| 질문하기 | 단계별 진행바, 카테고리 선택 버튼, 상황 입력 폼, 미리보기 카드, 제출 버튼 |\n| 질문 상세 | 질문 제목/내용, AI 답변 카드, 변호사 답변 리스트, 북마크 버튼, 유사 질문 추천 |\n| 검색/목록 | 검색 결과 헤더, 필터 사이드바, 질문 카드 그리드, 페이지네이션 |\n| 마이페이지 | 사용자 프로필, 활동 통계 위젯, 질문 내역 테이블, 북마크 목록 |\n| 변호사 대시보드 | 답변 대기 알림, 질문 목록 테이블, 잔액 표시, 통계 차트, 프로필 편집 폼 |\n| 관리자 패널 | 승인 대기 목록, PDF 업로드 폼, 신고 관리 테이블, 분석 대시보드 |\n\n## 6. 인터랙션 패턴 (인터랙션 패턴)\n\n### **모달 활용**\n- 회원가입/로그인 모달\n- 질문 상세 정보 입력 모달\n- 북마크 확인 모달\n- 답변 삭제 확인 모달\n\n### **툴팁**\n- 법률 용어 설명 툴팁\n- 버튼 기능 안내 툴팁\n- 폼 입력 가이드 툴팁\n\n### **무한 스크롤**\n- 질문 목록 페이지\n- 검색 결과 페이지\n- 변호사 답변 리스트\n\n### **실시간 업데이트**\n- AI 답변 생성 진행률 표시\n- 새로운 변호사 답변 실시간 알림\n- 북마크 상태 즉시 반영\n\n### **단계별 진행**\n- 질문 등록 스테퍼 (카테고리 → 상세정보 → 완료)\n- 변호사 인증 진행 단계 표시\n\n## 7. URL 구조 (URL 구조)\n\n### **일반 규칙**\n- 소문자 사용, 단어 구분은 하이픈(-)\n- 복수형 명사 사용 (questions, lawyers)\n- RESTful 패턴 준수\n\n### **주요 URL 패턴**\n- **홈**: `/`\n- **질문 목록**: `/questions`\n- **질문 상세**: `/questions/:id`\n- **카테고리별**: `/category/:slug`\n- **검색**: `/search?q=keyword&category=tax`\n- **사용자**: `/my/:section`\n- **변호사**: `/lawyer/:section`\n- **관리자**: `/admin/:section`\n\n### **SEO 최적화**\n- 의미있는 URL 슬러그 사용\n- 카테고리명은 한글 → 영문 변환 (전세임대차 → rental)\n- 질문 ID는 숫자 기반 자동 증가\n\n## 8. 컴포넌트 계층 구조 (컴포넌트 계층 구조)\n\n### **글로벌 컴포넌트**\n- **Header**: 로고, 검색창, 네비게이션, 사용자 메뉴\n- **Footer**: 링크, 저작권, 연락처 정보\n- **Sidebar**: 카테고리 필터, 광고 슬롯\n- **Modal**: 로그인, 회원가입, 확인 대화상자\n\n### **페이지별 컴포넌트**\n#### 홈페이지\n- **HeroSection**: 메인 배너, 검색창\n- **CategoryTabs**: 카테고리 탭 네비게이션\n- **QuestionCard**: 질문 미리보기 카드\n- **StatsWidget**: 서비스 통계 표시\n\n#### 질문 관련\n- **QuestionForm**: 질문 등록 폼\n- **AIAnswerCard**: AI 답변 표시 카드\n- **LawyerAnswerCard**: 변호사 답변 카드\n- **RelatedQuestions**: 유사 질문 추천 목록\n\n#### 사용자 인터페이스\n- **UserProfile**: 사용자 프로필 정보\n- **ActivityStats**: 활동 통계 차트\n- **BookmarkList**: 북마크 목록\n- **NotificationBell**: 알림 아이콘\n\n#### 변호사 전용\n- **LawyerDashboard**: 변호사 대시보드 레이아웃\n- **PendingQuestions**: 답변 대기 질문 목록\n- **BalanceWidget**: 잔액 표시 위젯\n- **AnswerEditor**: 답변 작성 에디터\n\n#### 관리자 전용\n- **AdminPanel**: 관리자 패널 레이아웃\n- **ApprovalQueue**: 승인 대기 목록\n- **DocumentUpload**: PDF 업로드 컴포넌트\n- **AnalyticsDashboard**: 분석 대시보드\n\n### **공통 UI 컴포넌트**\n- **Button**: Primary, Secondary, Danger 변형\n- **Input**: 텍스트, 이메일, 비밀번호 필드\n- **Card**: 기본 카드, 답변 카드, 통계 카드\n- **Badge**: 상태 표시, 카테고리 태그\n- **Loading**: 스켈레톤 UI, 스피너\n- **Alert**: 성공, 오류, 경고 메시지\n- **Tooltip**: 도움말 툴팁\n- **Pagination**: 페이지 네비게이션\n\n### **상태 관리 컴포넌트**\n- **AuthProvider**: 인증 상태 관리\n- **ThemeProvider**: 다크/라이트 테마\n- **NotificationProvider**: 알림 시스템\n- **SearchProvider**: 검색 상태 관리",
      "writedAt": "2025-10-03T16:03:26.857Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-10-03T16:03:26.857Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-10-03T16:03:26.857Z"
    }
  ]
}